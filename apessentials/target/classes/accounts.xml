<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata"
	xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">

	<flow name="getSFDCAccountsFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/sfdc" allowedMethods="GET" doc:name="HTTP" />
		<sfdc:query config-ref="Salesforce__Basic_authentication"
			query="dsql:SELECT BillingCity,BillingCountry,BillingPostalCode,BillingState,BillingStreet,Name FROM Account WHERE BillingPostalCode = '94118'"
			doc:name="Salesforce" />
		<json:object-to-json-transformer
			doc:name="Object to JSON" />
		<logger message="#[payload]" level="INFO" doc:name="Logger" />
	</flow>
	<batch:job name="accountsBatch">
		<batch:input>
			<poll doc:name="Poll">
				<fixed-frequency-scheduler frequency="30"
					timeUnit="SECONDS" />
				<watermark variable="lastAccountID" default-expression="0"
					selector="MAX" selector-expression="#[payload.accountID]" />
				<db:select config-ref="Training_MySQL_Configuration"
					doc:name="Database">
					<db:parameterized-query><![CDATA[SELECT *
FROM accounts
WHERE postal = '94118' AND accountID > #[flowVars.lastAccountID]]]></db:parameterized-query>
				</db:select>
			</poll>
			<dw:transform-message metadata:id="48efba57-8e50-448f-9bcb-e42bf61a8822"
				doc:name="Data Weave">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map ((value , index) -> {
	Name: value.name,
	BillingStreet: value.street,
	BillingCity: value.city,
	BillingState: value.state,
	BillingPostalCode: value.postal,
	BillingCountry: value.country
})]]></dw:set-payload>
			</dw:transform-message>
		</batch:input>
		<batch:process-records>
			<batch:step name="Batch_Step3">
				<enricher source="#[payload.size() &gt; 0]" target="#[recordVars.exists]"
					doc:name="Check Record Exists">
					<sfdc:query config-ref="Salesforce__Basic_authentication"
						query="dsql:SELECT Name FROM Account WHERE Name = '#[payload.Name]'"
						doc:name="Salesforce" />
				</enricher>
				<logger level="INFO" doc:name="Logger" />
			</batch:step>
			<batch:step name="Batch_Step2" accept-expression="#[!recordVars.exists]">
				<logger message="#['\n\nRECORD: ' + payload]" level="INFO"
					doc:name="Logger" />
				<batch:commit size="100" doc:name="Batch Commit">
					<sfdc:create config-ref="Salesforce__Basic_authentication"
						type="Account" doc:name="Salesforce">
						<sfdc:objects ref="#[payload]" />
					</sfdc:create>
				</batch:commit>
			</batch:step>
		</batch:process-records>
		<batch:on-complete>
			<logger
				message="#['\n\nProcessed: ' + payload.processedRecords + ' Failed: ' + payload.failedRecords]"
				level="INFO" doc:name="Logger" />
		</batch:on-complete>
	</batch:job>
	<batch:job name="accountsCSVBatch">
		<batch:input>
			<file:inbound-endpoint path="src/main/resources/input"
				moveToDirectory="src/main/resources/output" responseTimeout="10000"
				doc:name="File">
				<file:filename-regex-filter pattern=".*csv"
					caseSensitive="false" />
			</file:inbound-endpoint>
			<dw:transform-message metadata:id="b1256040-819f-4090-bb5d-591ec43ea5be"
				doc:name="Data Weave">
				<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map ((value , index) -> {
	"Billing Street": value."Billing Street",
	"Billing City": value."Billing City",
	"Billing Country": value."Billing Country",
	"Billing State": value."Billing State",
	Name: value.Name,
	BillingPostalCode: value.BillingPostalCode
})]]></dw:set-payload>
			</dw:transform-message>
			<set-variable variableName="size" value="#[payload.size()]"
				doc:name="Variable" />
		</batch:input>
		<batch:process-records>
			<batch:step name="Batch_Step">
				<set-variable variableName="fname" value="#[payload.Name]"
					doc:name="Variable" />
				<batch:set-record-variable variableName="rname"
					value="#[payload.Name]" doc:name="Record Variable" />
				<logger level="INFO" doc:name="Logger" />
			</batch:step>
			<batch:step name="Batch_Step1">
				<logger level="INFO" doc:name="Logger" />
			</batch:step>
		</batch:process-records>
		<batch:on-complete>
			<logger
				message="#['\n\nProcessed: ' + payload.processedRecords + ' Failed: ' + payload.failedRecords]"
				level="INFO" doc:name="Logger" />
		</batch:on-complete>
	</batch:job>
	<flow name="getCSVAccountsFlow" initialState="stopped">
		<file:inbound-endpoint path="src/main/resources/input"
			moveToDirectory="src/main/resources/output" responseTimeout="10000"
			doc:name="File">
			<file:filename-regex-filter pattern=".*csv"
				caseSensitive="false" />
		</file:inbound-endpoint>
		<dw:transform-message metadata:id="93f0be2f-b087-455a-8f01-b49750c13075"
			doc:name="Data Weave">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map ((value , index) -> {
	"Billing Street": value."Billing Street",
	"Billing City": value."Billing City",
	"Billing Country": value."Billing Country",
	"Billing State": value."Billing State",
	Name: value.Name,
	BillingPostalCode: value.BillingPostalCode
})]]></dw:set-payload>
		</dw:transform-message>
		<foreach doc:name="For Each">
			<logger message="#[payload]" level="INFO" doc:name="Logger" />
		</foreach>
		<logger message="#[payload]" level="INFO" doc:name="Logger" />
	</flow>
	<flow name="getBankAccountsFlow">
		<http:listener config-ref="HTTP_Listener_Configuration"
			path="/bank/{ID}" allowedMethods="GET" doc:name="HTTP" />
		<http:request config-ref="Bank_REST_Request_Configuration"
			path="/customers/{customer_id}/accounts" method="GET" doc:name="Bank REST Request">
			<http:request-builder>
				<http:uri-param paramName="customer_id"
					value=" #[message.inboundProperties.'http.uri.params'.ID]" />
			</http:request-builder>
		</http:request>
	</flow>

</mule>
